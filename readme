### Eye-Able Assignment – Project Structure

This repository contains two independent parts that map 1:1 to the assignment tasks.

- **01_charts**: React + TypeScript app that visualizes the US population and lets users choose 3/5/10 years. (Aufgabe 1)
- **02_api**: Bun + Elysia HTTP API with two endpoints, simple Bearer auth, and Docker setup. (Aufgabe 2)
- **03_links**: Readme on how to find broken links. (Aufgabe 3)

---

### What’s inside

- **charts/** (Task 1)

  - **Goal**: Show US population over time using `https://honolulu-api.datausa.io/tesseract/data.jsonrecords?cube=pums_5&drilldowns=Nation,Year&measures=Total+Population`.
  - **Key files**:
    - `src/use-chart-data.ts`: Fetches and validates data (Zod), caches by URL, exposes `years` state (3/5/10).
    - `src/components/select-years.tsx`: UI control to pick 3, 5, or 10 years.
    - `src/components/chart-card.tsx`: Accessible chart (Recharts) with table fallback and growth summary.
    - `src/App.tsx`: Wires selection + chart, handles loading/errors.
  - **Tech**: React 19, Vite 7, TypeScript, Tailwind 4, Recharts, Zod.

- **api/** (Task 2)
  - **Goal**: Two endpoints and simple auth; Dockerized.
  - **Endpoints**:
    - `GET /` → `Hallo Welt`
    - `GET /hallo/:name` → `Hallo <Name>. Heute ist der <Datum>` (requires `Authorization: Bearer <API_TOKEN>`)
    - `GET /openapi` → OpenAPI docs (auto-generated)
  - **Auth**: Bearer token via `API_TOKEN` env var. Missing/wrong token returns 401.
  - **Docker**: Multi-stage build (Bun → distroless) and `docker-compose.yml` for local run.

---

### How to run

- **Task 1 – charts app**

  - Requirements: Node 18+, `pnpm`.
  - Commands:
    - `cd charts`
    - `pnpm install`
    - `pnpm dev` → visit `http://localhost:5173`

- **Task 2 – api service**

  - Requirements: Bun (for local dev) or Docker.
  - Local dev:
    - `cd api`
    - `bun install`
    - `API_TOKEN=your-token bun run --watch src/index.ts`
    - Test:
      - `curl http://localhost:3000/` → Hallo Welt
      - `curl -H "Authorization: Bearer your-token" http://localhost:3000/hallo/Ada`
  - Docker (recommended):
    - `cd api`
    - Create `.env` with: `API_TOKEN=your-token`
    - `docker compose up --build -d`
    - Test as above against `http://localhost:3000`

- **Task 3 – broken links**
  - contains a readme with the solution

NOTE: (This file was generated by AI)
